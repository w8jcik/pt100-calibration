// Generated by CoffeeScript 1.7.1
(function() {
  var App, Utils, plot, plotFlot, sensors;

  App = Ember.Application.create();

  App.Router.map(function() {
    return this.resource('sensors', function() {
      return this.route('sensor', {
        path: '/:sensor_no'
      });
    });
  });

  window.sensors = sensors = [
    {
      id: 1,
      desc: "Prechamber, ground",
      points: [
        {
          r: 115.54,
          adc: 4015,
          deg: void 0
        }, {
          r: 109.73,
          adc: 3807,
          deg: void 0
        }, {
          r: 90.19,
          adc: 3044,
          deg: void 0
        }, {
          r: 60.25,
          adc: 1960,
          deg: void 0
        }, {
          r: 24.94,
          adc: 1069,
          deg: void 0
        }
      ]
    }, {
      id: 2,
      desc: "Prechamber, ground"
    }, {
      id: 3,
      desc: "Chamber, head"
    }, {
      id: 4,
      desc: "Chamber, groin"
    }, {
      id: 5,
      desc: "Chamber, ground"
    }, {
      id: 6,
      desc: "Chamber, ground"
    }, {
      id: 7,
      desc: "Unused"
    }
  ];

  App.ApplicationRoute = Ember.Route.extend({
    model: function() {
      return sensors;
    }
  });

  App.SensorsSensorRoute = Ember.Route.extend({
    model: function(params) {
      var found;
      return found = sensors[params.sensor_no - 1];
    },
    setupController: function(controller, model) {
      return controller.set('model', model);
    }
  });

  Utils = {
    pt100: function(r) {
      var dt, i, left, t, table;
      table = [18.49, 20.65, 22.80, 24.94, 27.08, 29.20, 31.32, 33.43, 35.53, 37.63, 39.71, 41.79, 43.87, 45.94, 48.00, 50.06, 52.11, 54.15, 56.19, 58.22, 60.25, 62.28, 64.30, 66.31, 68.33, 70.33, 72.33, 74.33, 76.33, 78.32, 80.31, 82.29, 84.27, 86.25, 88.22, 90.19, 92.16, 94.12, 96.09, 98.04, 100.0, 101.95, 103.9, 105.85, 107.79, 109.73, 111.67, 113.61, 115.54, 117.47, 119.4];
      if (r > table[0]) {
        left = 800;
        t = -200;
        i = 0;
        dt = 0;
        while (t < 250) {
          if (left < 0) {
            break;
          }
          i += 1;
          dt = 5;
          t += dt;
          if (r < table[i]) {
            return t + (r - table[i - 1]) * dt / (table[i] - table[i - 1]);
          }
          left -= 1;
        }
        return t;
      }
    }
  };

  plot = null;

  plotFlot = function(sensor_no) {
    var data, equation, line, linear_regression, regression_data;
    data = _.map(sensors[sensor_no - 1].points, function(point) {
      return [point.adc, Utils.pt100(point.r)];
    });
    linear_regression = ss.linear_regression().data(data);
    line = linear_regression.line();
    regression_data = [[0, line(0)], [4095, line(4095)]];
    equation = {
      m: linear_regression.m(),
      b: linear_regression.b()
    };
    if (plot) {
      plot.setData([
        {
          label: "&nbsp;Given points",
          data: data,
          lines: {
            show: false
          },
          points: {
            show: true
          }
        }, {
          label: "&nbsp;Estimation",
          data: regression_data,
          lines: {
            show: true
          },
          points: {
            show: false
          }
        }
      ]);
      plot.setupGrid();
      plot.draw();
      return $("#equation").html("<p class=\"lead\"><var>y</var> = " + (equation.m.toFixed(6)) + " <var>x</var> " + (equation.b.toFixed(0)) + "</p>");
    }
  };

  App.SensorsSensorView = Ember.View.extend({
    modelObserver: (function() {
      return Ember.run.scheduleOnce('afterRender', this, function() {
        var point, sensor, _i, _len, _ref;
        sensor = this.get('controller.model');
        if (sensor.points) {
          _ref = sensor.points;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            console.log(point);
          }
        }
        return plotFlot(sensor.id);
      });
    }).observes('controller.model'),
    didInsertElement: function() {
      var sensor_no;
      this._super();
      sensor_no = this.get('controller.model').id;
      plotFlot(sensor_no);
      return plot = $.plot("#plot", [], {
        grid: {
          borderWidth: 1
        },
        legend: {
          position: "nw"
        },
        xaxis: {
          min: 0,
          max: 4100
        },
        yaxis: {
          min: -200,
          max: 50
        }
      });
    }
  });

  App.FlotParamComponent = Ember.TextField.extend({
    changeHandler: (function() {
      return plotFlot(this.get('sensor_no'));
    }).on('change')
  });

}).call(this);
